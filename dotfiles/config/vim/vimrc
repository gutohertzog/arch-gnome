" vim:fileencoding=utf-8:foldmethod=marker:foldlevel=1
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"                    ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"                    ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"                     █║   ██║██║██╔████╔██║██████╔╝██║
"                     ██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"                      ████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"                       ═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"
" Maintainer:
"       Guto Hertzog - @gutohertzog
"
" Sections:
"    -> Primeiro
"    -> Plug
"    -> Plugins
"    -> Funções
"    -> Configurações
"    -> Atalhos
"    -> Último
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PRIMEIRO ---------------------------------------------------------------- {{{
" configurações que PRECISAM ser carregadas antes de tudo

" desativa a compatibilidade com vi
set nocompatible

" sintaxe individual para os buffers
syntax on
filetype on
filetype plugin on
filetype indent on

let mapleader=" "
let maplocalleader=" "
" }}}
" PLUG -------------------------------------------------------------------- {{{
call plug#begin('~/.local/share/vim/plugged')

Plug 'preservim/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'vim-airline/vim-airline'
Plug 'ryanoasis/vim-devicons'
Plug 'machakann/vim-highlightedyank'
"Plug 'TaDaa/vimade'
"Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" A git wrapper.
"Plug 'tpope/vim-fugitive'
"Plug 'tpope/vim-surround'
Plug 'voldikss/vim-floaterm'

call plug#end()
" }}}
" PLUGINS ----------------------------------------------------------------- {{{

" airline {{{
" https://github.com/vim-airline/vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#show_buffers = 1
" }}}

" codedark {{{
" https://github.com/tomasiser/vim-code-dark
let g:codedark_modern = 1
let g:codedark_italics = 1
let g:codedark_transparent = 1
let g:airline_theme = 'codedark'
" }}}

" highlightedyank {{{
" https://github.com/machakann/vim-highlightedyank
let g:highlightedyank_highlight_duration = 250
" }}}

" nerdtree {{{
" https://github.com/preservim/nerdtree
let g:NERDTreeFileLines = 1
" inicia nerdtree com o cursor nela
"autocmd VimEnter * NERDTree
let NERDTreeShowHidden = 1

noremap <leader>e :NERDTreeToggle<CR>
noremap <leader>E :NERDTreeFocus<CR>
" }}}

" fzf {{{
" https://github.com/junegunn/fzf.vim
let g:fzf_command_prefix = 'Fzf'
let g:fzf_history_dir = '~/.config/local/share/fzf-vim-history'
let $FZF_DEFAULT_OPTS = '--reverse'

let g:fzf_vim = {}
let g:fzf_vim.preview_window = ['right,50%,<60(up,40%)', 'ctrl-l']
"let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
"let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }
"let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.6, 'border': 'rounded' } }

" procura {{{
" arquivos
noremap <Leader>ff :FzfFiles<CR>
noremap <Leader>fF :FzfFiles!<CR>
noremap <Leader>fw :FzfRg<space>
noremap <Leader>fW :FzfRg!<space>
noremap <Leader>fb :FzfBuffers<CR>
noremap <Leader>fB :FzfBuffers!<CR>
" atalhos
noremap <Leader>fk :FzfMaps<CR>
" histórico arquivos
noremap <Leader>fh :FzfHistory<CR>
" histórico busca
noremap <Leader>fs :FzfHistory/<CR>
" comandos
noremap <Leader>fc :FzfHistory:<CR>
" }}}
" }}}

" markdown {{{
let g:markdown_folding = 1
" }}}

" floaterm {{{
" https://github.com/voldikss/vim-floaterm
nnoremap <C-;> :FloatermToggle<CR>
tnoremap <C-;> <C-\><C-n>:FloatermToggle<CR>
tnoremap <F5> python main.py<CR>
tnoremap <F8> <C-\><C-n>:FloatermKill<CR>

let g:floaterm_width = 0.6
let g:floaterm_height = 0.8
"let g:floaterm_borderchars = '═║═║╔╗╝╚'
" }}}

" }}}
" FUNÇÕES ----------------------------------------------------------------- {{{
" ToggleChars {{{
" função para ativar e desativar os caracteres de marcação
let g:t_flag = 0

function! ToggleChars()
  if g:t_flag
    echom "listchar desativado"
    set nolist
    let g:t_flag = 0
  else
    echom "listchar ativado"
    set list
    set listchars=tab:<->,eol:↲,nbsp:║,space:␣,trail:•,extends:⟩,precedes:⟨
    let g:t_flag = 1
  endif
endfunction

nnoremap <F12> :call ToggleChars()<CR>
" }}}

" ToggleWrap {{{
" função para ativar e desativar o wrap
let g:w_flag = 1

function! ToggleWrap()
  if g:w_flag
    echom "wrap desativado"
    set nowrap
    let g:w_flag = 0
  else
    echom "wrap ativado"
    set wrap
    let g:w_flag = 1
  endif
endfunction

nnoremap <F9> :call ToggleWrap()<CR>
" }}}

" ToggleTransparency {{{
" função para ativar e desativar a transparência
let g:b_flag = 1

"if g:codedark_modern | let s:cdBack = {'gui': '#1f1f1f', 'cterm': 'NONE', 'cterm256': '234'} | endif
"if g:codedark_transparent | let s:cdBack = {'gui': 'NONE', 'cterm': 'NONE', 'cterm256': 'NONE'} | endif

function! ToggleTransparency()
  if g:b_flag
    echom "fundo transparente desativado"
    hi Normal ctermbg=234
    let g:b_flag = 0
  else
    echom "fundo transparente ativado"
    hi Normal ctermbg=None
    let g:b_flag = 1
  endif
endfunction

nnoremap <F11> :call ToggleTransparency()<CR>
" }}}

" }}}
" CONFIGURAÇÕES ----------------------------------------------------------- {{{

" cursor {{{
"   Ps = 0  -> blinking block
"   Ps = 1  -> blinking block (default)
"   Ps = 2  -> steady block
"   Ps = 3  -> blinking underline
"   Ps = 4  -> steady underline
"   Ps = 5  -> blinking bar (xterm)
"   Ps = 6  -> steady bar (xterm)
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
" }}}

" tema {{{
set t_Co=256
set t_ut=
" cores do programa
colorscheme codedark
" fundo transparente
"hi Normal ctermbg=NONE
set background=dark
" }}}

" como o backspace funciona no final da linha
set backspace=indent,eol,start

" atualiza arquivo se alterado fora
set autoread
au FocusGained,BufEnter * silent! checktime

" regex
set magic

set noautowrite

set clipboard=unnamed,unnamedplus

set completeopt=menu,menuone,noselect

" sem som de erros
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" pop up menu
set pumheight=10

" divisão da tela
set splitbelow
set splitright

set wildmenu
set wildmode=list:longest

set history=1000

set noignorecase

set encoding=utf-8

" interface {{{
set number
set relativenumber

set laststatus=2

set cursorline
hi clear CursorLine
hi CursorLine cterm=underline
set nocursorcolumn

set scrolloff=1
set sidescrolloff=0

set wrap

set showmatch

set colorcolumn=80,100

" barra inferior
set showcmd

set showmode

set showbreak=↪\
set nolist
" }}}

" tabs {{{
set shiftwidth=2
set smarttab
set shiftround
set tabstop=2
set softtabstop=2
set expandtab
" }}}

" busca {{{
set wrapscan
set incsearch
set ignorecase
set smartcase
set hlsearch
" }}}

" backup {{{
set nobackup
set noswapfile
set nowritebackup
" }}}

" fold {{{
set foldclose=
set foldcolumn=2
set nofoldenable
set foldexpr=0
set foldignore=#
set foldlevel=0
set foldlevelstart=1
set foldmarker={{{,}}}
set foldmethod=manual
set foldminlines=1
set foldnestmax=20
set foldopen=block,hor,mark,percent,quickfix,search,tag,undo
set foldtext=foldtext()
" }}}


" }}}
" ATALHOS  ----------------------------------------------------------- {{{
nnoremap <leader>vim :e $MYVIMRC<cr>

" desativa {{{
nnoremap <space> <nop>
vnoremap <space> <nop>
no <up> <nop>
no <down> <nop>
no <left> <nop>
no <right> <nop>
" }}}

" Y como C ou D
map Y y$

" salvamentos {{{
nnoremap <leader>so :source $MYVIMRC<cr>

inoremap <C-s> <Esc>:w<CR>a
xnoremap <C-s> <Esc>:w<CR>
nnoremap <C-s> :w<CR>
snoremap <C-s> <Esc>:w<CR>

" :W salva o arquivo com sudo
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!
" }}}

" navegação {{{
" janelas
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

nnoremap <leader>ww <C-W>c
nnoremap <leader>ws :new<CR>
nnoremap <leader>wS :split<CR>
nnoremap <leader>wv :vnew<CR>
nnoremap <leader>wV :vsplit<CR>

" tabs
nnoremap <leader>tt :tabnew<CR>
nnoremap <leader>tw :tabclose<CR>
nnoremap <leader>tn :tabnext<CR>
nnoremap <leader>tp :tabprevious<CR>

" buffers
nnoremap <leader>bw :bdelete<CR>
nnoremap <tab> :bnext<CR>
nnoremap <s-tab> :bprevious<CR>
"nnoremap <tab> :blast<CR>

" arquivos
noremap H ^
noremap L $
" }}}

" tamanho janela {{{
nnoremap <C-Up> :resize +2<cr>
nnoremap <C-Down> :resize -2<CR>
nnoremap <C-Left> :vertical resize -2<CR>
nnoremap <C-Right> :vertical resize +2<CR>
" }}}

" edição arquivo {{{
" troca linha(s) com alt + j/k
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" caixa alta
inoremap <c-k> <esc>viwUea

" indentação
vnoremap < <gv
vnoremap > >gv
" }}}

" buscas {{{
nnoremap <esc> :nohl<cr>

" busca texto selecionado
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>
" }}}

" completamentos {{{
" busca palavra (bugado)
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})
" completa caminho
inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')
" }}}

" ordenação {{{
" ordena linhas selecionadas
vnoremap <C-s> :sort<CR>
" }}}

" substituição {{{
" substitui todas ocorrências
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>
vnoremap <leader><C-r> "hy:%s/<C-r>h/<C-r>h/g<left><left>
" }}}

" }}}
" ÚLTIMO {{{
" configuração que precisam vir por último
" https://github.com/vim-airline/vim-airline/issues/393
set t_RV=
" remove [] entre os ícones na nerdtree
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif
" }}}
